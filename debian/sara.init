#!/bin/sh
#
#     saractl - S.A.R.A.'s userspace utilities.
#     Copyright (C) 2017  Salvatore Mesoraca <s.mesoraca16@gmail.com>
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Author: Salvatore Mesoraca <s.mesoraca16@gmail.com>

### BEGIN INIT INFO
# Provides:          sara
# Required-Start:    $local_fs
# Required-Stop:     umountfs
# Default-Start:     S
# Default-Stop:      0 6
# Short-Description: S.A.R.A. initialization
# Description:       S.A.R.A. init script. This script loads the config.
### END INIT INFO


# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="S.A.R.A. init script."
NAME=sara
SCRIPTNAME=/etc/init.d/$NAME
SARA_CMD="/usr/sbin/saractl"

# Exit if the package is not installed
[ -x "$SARA_CMD" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	$SARA_CMD startup || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	$SARA_CMD disable || return 2
	return "$RETVAL"
}

do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	$SARA_CMD load || return 2
	return 0
}

do_force_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	$SARA_CMD load -f || return 2
	return 0
}

case "$1" in
  start)
	if [ -x /bin/running-in-container ] && /bin/running-in-container; then
		log_daemon_msg "Not starting S.A.R.A. in container"
		log_end_msg 0
		exit 0
	fi
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	if [ -x /bin/running-in-container ] && /bin/running-in-container; then
		log_daemon_msg "Not stopping S.A.R.A. in container"
		log_end_msg 0
		exit 0
	fi
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	$SARA_CMD status
	;;
  reload)
	if [ -x /bin/running-in-container ] && /bin/running-in-container; then
		log_daemon_msg "Not reloading S.A.R.A. in container"
		log_end_msg 0
		exit 0
	fi
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  force-reload)
	if [ -x /bin/running-in-container ] && /bin/running-in-container; then
		log_daemon_msg "Not reloading S.A.R.A. in container"
		log_end_msg 0
		exit 0
	fi
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_force_reload
	log_end_msg $?
	;;
  restart)
	if [ -x /bin/running-in-container ] && /bin/running-in-container; then
		log_daemon_msg "Not restarting S.A.R.A. in container"
		log_end_msg 0
		exit 0
	fi
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
